apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: com.github.ok2c.gradle.android.PublishAdaptorPlugin

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 28

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    lintOptions {
        lintConfig file("lint.xml")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '28.0.3'
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

}
dependencies {
    api libraries.httpclient
    testImplementation libraries.junit
    testImplementation libraries.hamcrest
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    options.addBooleanOption('Xdoclint:-missing', true)
    options.links 'http://docs.oracle.com/javase/7/docs/api/',
            'http://developer.android.com/reference/',
            'http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/apidocs/',
            'http://hc.apache.org/httpcomponents-core-4.4.x/httpcore/apidocs/'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {

    publishing {
        publications {
            mavenArtifacts(MavenPublication) {

                from components.releaseAndroidLibrary
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom {
                    name = 'Apache HttpClient extensions for Android'
                    description = 'Apache HttpClient extensions for Android'
                    url = 'https://github.com/ok2c/httpclient-android-ext'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'ok2c'
                            name = 'Oleg Kalnichevski'
                            email = 'olegk@apache.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:ok2c/httpclient-android-ext.git'
                        developerConnection = 'scm:git:ssh://github.com:ok2c/httpclient-android-ext.git'
                        url = 'https://github.com/ok2c/httpclient-android-ext'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl

                if (project.ext.has('ossrh.user')) {
                    credentials {
                        username = project.ext.'ossrh.user'
                        password = project.ext.'ossrh.password'
                    }
                }
            }
        }
    }

    if (releaseVersion) {
        signing {
            sign publishing.publications.mavenArtifacts
        }
    }

}

def askSigningKeyPassphrase() {
    def keyId = project.ext.has('signing.keyId') ? project.ext.'signing.keyId' : null
    def password = project.ext.has('signing.password') ? project.ext.'signing.password' : null
    if (keyId && !password) {
        def console = System.console()
        if (console) {
            console.println "\n> Please provide password for PGP key ${keyId}: "
            char[] raw = console.readPassword()
            project.ext.'signing.password' = new String(raw)
        } else {
            logger.warn 'Console is not available'
        }
    }
}

def askRepoPassword(MavenArtifactRepository repository) {
    def credentials = repository.credentials
    if (credentials.username && !credentials.password) {
        def console = System.console()
        if (console) {
            console.println "\n> Please provide password for user ${credentials.username}: "
            char[] raw = console.readPassword()
            credentials.password = new String(raw)
        } else {
            logger.warn 'Console is not available'
        }
    }
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    taskGraph.allTasks.findAll { task -> task instanceof Sign }.each { task ->
        task.doFirst { askSigningKeyPassphrase() }
    }
    taskGraph.allTasks.findAll { task -> task instanceof PublishToMavenRepository }.each { task ->
        task.doFirst { askRepoPassword(task.repository) }
    }
}